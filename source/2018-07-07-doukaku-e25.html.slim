---
title: オフラインリアルタイムどう書く E25 の問題 - ビッグ7
date: 2018-07-07 16:00 JST
tags:
---

markdown:
  [オフラインリアルタイムどう書く E25](https://yhpg.doorkeeper.jp/events/75247) の問題です。

  格子状に並んだ点がある。一番大きな7を描こう。

  ![](2018/07/07/example-1.png)
  ![](2018/07/07/example-2.png)

  ## ルール

  「7」の1辺が最も長いものを求め、各頂点の座標を返す。

  「7」の条件は以下の通り。

  1. 3本の直線でできている
  2. 1:1:2 の長さである
  3. 図のように直角に繋がっている

  ![](2018/07/07/7-1.png)

  ## 入力

  `4,7,(0,3)` のような入力。
  最初の2つの数字、 `4`、`7` はそれぞれ縦と横の点の数。
  `(0,3)` は 7 の左側の短い縦線の先端の座標。

  ![](2018/07/07/7-2.png)

  ## 出力

  `(0,0),(3,0),(3,6)` 、または `-` のような形式。
  入力で指定された地点から時計回りで座標を返す。

  ![](2018/07/07/7-3.png)

  候補が複数ある場合、または一つも「7」を描く余地がない場合には `-` を返す。


  ## 補足

  不正な入力について考慮する必要はない。

  ----------

  実装ができた方は [Qiitaの記事](https://qiita.com/mtsmfm/items/9e06456b4330305d4ed0) のコメント欄からリンクを張っていただくと見つけやすくて助かります。

ruby:
  json = JSON.parse(File.read(File.join(__dir__, "2018-07-07-doukaku-e25/doukaku.json")), symbolize_names: true)

h2 サンプルデータ

table
  thead
    tr
      th #
      th 入力
      th 期待

  tbody
    - json.each.with_index do |data, i|
      tr
        td= i
        td= data[:input]
        td= data[:expected]

h2 テストデータ

h3 C/C++/Java 用のテストデータ

textarea= json.map.with_index {|data, i| %!/*#{i}*/ test("#{data[:input]}", "#{data[:expected]}");! }.join("\n")

h3 JSON 形式のテストデータ

= link_to 'json', 'https://github.com/mtsmfm/mtsmfm.github.io/raw/2c9f20bd754a494926eda17ff7ecfdbb5db8b657/source/2018-07-07-doukaku-e25/doukaku.json', target: '_blank'

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mtsmfm blog</title>
  <subtitle>mtsmfm blog</subtitle>
  <id>http://mtsmfm.github.io/</id>
  <link href="http://mtsmfm.github.io/"/>
  <link href="http://mtsmfm.github.io/feed.xml" rel="self"/>
  <updated>2022-08-01T13:00:00+00:00</updated>
  <author>
    <name>mtsmfm</name>
  </author>
  <entry>
    <title>Autify に転職しました</title>
    <link rel="alternate" href="http://mtsmfm.github.io/2022/08/01/hello-autify.html"/>
    <id>http://mtsmfm.github.io/2022/08/01/hello-autify.html</id>
    <published>2022-08-01T13:00:00+00:00</published>
    <updated>2022-08-01T15:02:09+00:00</updated>
    <author>
      <name>mtsmfm</name>
    </author>
    <content type="html">&lt;p&gt;リクルート (旧 Quipper Japan) を退職し、&lt;a href="https://autify.com/"&gt;Autify&lt;/a&gt; に入社しました。&lt;/p&gt;

&lt;p&gt;Quipper は友人に誘われ 2017 年に転職しました。
最終出社日に数えたら、この 5 年で 2419 の PR を作ってマージまでもっていたようです。
&lt;img src="/images/2022/08/01/image.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;自社サービスの開発したさが 6 割、仕事で英語やりたさが 2 割、知り合いが何人かいるからが 2 割くらいでの転職でした。特に自社サービスにある程度長く関わってメンテナンスする中で、自分の設計判断が後々にどのような影響を生むかを身をもって知ることができました。うまくいくかどうかは運要素も少なくないですが、結果として自分が苦しむ、あるいは楽するという形で当時の判断についてのフィードバックが得られるのは、自身で開発運用までしないとできない経験だと思います。私が関わった最大の機能のコア部分は残念ながら売上などの理由により廃止になってしまいましたが、最後に自分の手で消すことができたのも感慨深いものがありました。また、その機能自体は廃止されたものの、その実装過程で行ったリファクタが 1 年後に思わぬ機能開発の際に生きてくるなど、成長し続けるソフトウェアの先の読めなさを感じました。&lt;/p&gt;

&lt;p&gt;好き勝手やっていたら評価もしていただき、MVP に選出していただいたり、シニアソフトウェアエンジニアという役職をいただいたりと大きな励みになりました。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-partner="tweetdeck"&gt;&lt;p lang="ja" dir="ltr"&gt;わぁい &lt;a href="https://t.co/rKgvX0WUYT"&gt;pic.twitter.com/rKgvX0WUYT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Fumiaki MATSUSHIMA (@mtsmfm) &lt;a href="https://twitter.com/mtsmfm/status/987265054817972226?ref_src=twsrc%5Etfw"&gt;April 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;それなりの期間働くうちに組織の変遷を経て Quipper がリクルートに統合されることとなりました。
そんな中、そろそろ次について考えていたところお声がけいただき、 Autify にまずは副業として参加したのち入社を決めました。&lt;/p&gt;

&lt;p&gt;自動テスト、特に E2E テストにはもともと興味があり、&lt;a href="https://speakerdeck.com/mtsmfm/how-do-e2e-tests-fail-randomly"&gt;不安定なテストについて悩まされる中で得た知見の発表&lt;/a&gt;をしたこともありました。
E2E テストはうまく動く分には書いたテスト量あたりの価値が高い一方で、速度や落ちたときのわかりにくさ、安定性などで課題を感じていました。
仕事でこういった開発支援ツール自体の開発ができるのはとてもおもしろそうで、利用者からの評判もよく、利用シーンが想像しやすく、またちゃんとドッグフーディングしているという点も魅力的でした。
また、英語について、Quipper で特に後半は使う機会がなかったので、再挑戦していきたいと思っています。&lt;/p&gt;

&lt;p&gt;私は離れる決断をしましたが、スタディサプリ開発チームは教育にただ熱意を燃やすだけでなく&lt;a href="https://blog.studysapuri.jp/entry/2022/07/25/ruby-ujihisa"&gt;プログラマとして N 家言持っているメンバー&lt;/a&gt;、&lt;a href="https://blog.studysapuri.jp/entry/pre-mortem"&gt;開発を支えてくれる強力な SRE&lt;/a&gt;などユニークな精鋭がおり、&lt;a href="https://recruit-saiyo.jp/benefits/"&gt;平均週休 3 日&lt;/a&gt;の実践など待遇面でも優れた環境だと感じています。&lt;/p&gt;

&lt;p&gt;バランスをとって両方の採用ページを貼っておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://brand.studysapuri.jp/career/"&gt;スタディサプリ採用情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://autify.com/careers"&gt;Autify 採用情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今後ともよろしくお願いします。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>オフラインリアルタイムどう書く E25 の問題 - ビッグ7</title>
    <link rel="alternate" href="http://mtsmfm.github.io/2018/07/07/doukaku-e25.html"/>
    <id>http://mtsmfm.github.io/2018/07/07/doukaku-e25.html</id>
    <published>2018-07-07T07:00:00+00:00</published>
    <updated>2022-08-01T15:02:09+00:00</updated>
    <author>
      <name>mtsmfm</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://yhpg.doorkeeper.jp/events/75247"&gt;オフラインリアルタイムどう書く E25&lt;/a&gt; の問題です。&lt;/p&gt;

&lt;p&gt;格子状に並んだ点がある。一番大きな7を描こう。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018/07/07/example-1.png" alt="" /&gt;
&lt;img src="/images/2018/07/07/example-2.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;ルール&lt;/h2&gt;

&lt;p&gt;「7」の1辺が最も長いものを求め、各頂点の座標を返す。&lt;/p&gt;

&lt;p&gt;「7」の条件は以下の通り。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;3本の直線でできている&lt;/li&gt;
&lt;li&gt;1:1:2 の長さである&lt;/li&gt;
&lt;li&gt;図のように直角に繋がっている&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="/images/2018/07/07/7-1.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;入力&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;4,7,(0,3)&lt;/code&gt; のような入力。
最初の2つの数字、 &lt;code&gt;4&lt;/code&gt;、&lt;code&gt;7&lt;/code&gt; はそれぞれ縦と横の点の数。
&lt;code&gt;(0,3)&lt;/code&gt; は 7 の左側の短い縦線の先端の座標。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018/07/07/7-2.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;出力&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;(0,0),(3,0),(3,6)&lt;/code&gt; 、または &lt;code&gt;-&lt;/code&gt; のような形式。
入力で指定された地点から時計回りで座標を返す。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018/07/07/7-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;候補が複数ある場合、または一つも「7」を描く余地がない場合には &lt;code&gt;-&lt;/code&gt; を返す。&lt;/p&gt;

&lt;h2&gt;補足&lt;/h2&gt;

&lt;p&gt;不正な入力について考慮する必要はない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;実装ができた方は &lt;a href="https://qiita.com/mtsmfm/items/9e06456b4330305d4ed0"&gt;Qiitaの記事&lt;/a&gt; のコメント欄からリンクを張っていただくと見つけやすくて助かります。&lt;/p&gt;
&lt;h2&gt;サンプルデータ&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;#&lt;/th&gt;&lt;th&gt;入力&lt;/th&gt;&lt;th&gt;期待&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;4,7,(0,3)&lt;/td&gt;&lt;td&gt;(0,0),(3,0),(3,6)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;4,6,(3,3)&lt;/td&gt;&lt;td&gt;(2,5),(0,4),(2,0)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1,1,(0,0)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2,2,(0,0)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;2,3,(0,0)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;2,3,(0,1)&lt;/td&gt;&lt;td&gt;(0,0),(1,0),(1,2)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;2,3,(1,1)&lt;/td&gt;&lt;td&gt;(1,2),(0,2),(0,0)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;2,3,(1,2)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;3,4,(1,2)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;4,3,(2,2)&lt;/td&gt;&lt;td&gt;(1,2),(1,1),(3,1)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;7,7,(2,5)&lt;/td&gt;&lt;td&gt;(0,3),(2,1),(6,5)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;8,7,(1,1)&lt;/td&gt;&lt;td&gt;(3,0),(4,2),(0,4)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;9,7,(3,6)&lt;/td&gt;&lt;td&gt;(0,4),(2,1),(8,5)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;10,7,(6,6)&lt;/td&gt;&lt;td&gt;(3,6),(3,3),(9,3)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;10,11,(4,2)&lt;/td&gt;&lt;td&gt;(8,1),(9,5),(1,7)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;10,12,(0,3)&lt;/td&gt;&lt;td&gt;(3,0),(6,3),(0,9)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;10,13,(0,0)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;10,14,(4,3)&lt;/td&gt;&lt;td&gt;(8,2),(9,6),(1,8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;15,15,(2,1)&lt;/td&gt;&lt;td&gt;(5,0),(6,3),(0,5)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;16,17,(14,13)&lt;/td&gt;&lt;td&gt;(10,16),(7,12),(15,6)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;19,7,(18,0)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;20,7,(1,4)&lt;/td&gt;&lt;td&gt;(0,1),(3,0),(5,6)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;25,11,(15,1)&lt;/td&gt;&lt;td&gt;(24,1),(24,10),(6,10)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;26,12,(12,8)&lt;/td&gt;&lt;td&gt;(4,8),(4,0),(20,0)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;27,13,(14,2)&lt;/td&gt;&lt;td&gt;(24,2),(24,12),(4,12)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;28,14,(6,6)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;30,30,(25,17)&lt;/td&gt;&lt;td&gt;(20,29),(8,24),(18,0)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;35,36,(32,3)&lt;/td&gt;&lt;td&gt;(34,8),(29,10),(25,0)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;150,130,(50,113)&lt;/td&gt;&lt;td&gt;(8,56),(65,14),(149,128)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;/td&gt;&lt;td&gt;180,120,(120,18)&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt;200,200,(24,134)&lt;/td&gt;&lt;td&gt;(0,45),(89,21),(137,199)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;テストデータ&lt;/h2&gt;&lt;h3&gt;C/C++/Java 用のテストデータ&lt;/h3&gt;&lt;textarea&gt;/*0*/ test("4,7,(0,3)", "(0,0),(3,0),(3,6)");
/*1*/ test("4,6,(3,3)", "(2,5),(0,4),(2,0)");
/*2*/ test("1,1,(0,0)", "-");
/*3*/ test("2,2,(0,0)", "-");
/*4*/ test("2,3,(0,0)", "-");
/*5*/ test("2,3,(0,1)", "(0,0),(1,0),(1,2)");
/*6*/ test("2,3,(1,1)", "(1,2),(0,2),(0,0)");
/*7*/ test("2,3,(1,2)", "-");
/*8*/ test("3,4,(1,2)", "-");
/*9*/ test("4,3,(2,2)", "(1,2),(1,1),(3,1)");
/*10*/ test("7,7,(2,5)", "(0,3),(2,1),(6,5)");
/*11*/ test("8,7,(1,1)", "(3,0),(4,2),(0,4)");
/*12*/ test("9,7,(3,6)", "(0,4),(2,1),(8,5)");
/*13*/ test("10,7,(6,6)", "(3,6),(3,3),(9,3)");
/*14*/ test("10,11,(4,2)", "(8,1),(9,5),(1,7)");
/*15*/ test("10,12,(0,3)", "(3,0),(6,3),(0,9)");
/*16*/ test("10,13,(0,0)", "-");
/*17*/ test("10,14,(4,3)", "(8,2),(9,6),(1,8)");
/*18*/ test("15,15,(2,1)", "(5,0),(6,3),(0,5)");
/*19*/ test("16,17,(14,13)", "(10,16),(7,12),(15,6)");
/*20*/ test("19,7,(18,0)", "-");
/*21*/ test("20,7,(1,4)", "(0,1),(3,0),(5,6)");
/*22*/ test("25,11,(15,1)", "(24,1),(24,10),(6,10)");
/*23*/ test("26,12,(12,8)", "(4,8),(4,0),(20,0)");
/*24*/ test("27,13,(14,2)", "(24,2),(24,12),(4,12)");
/*25*/ test("28,14,(6,6)", "-");
/*26*/ test("30,30,(25,17)", "(20,29),(8,24),(18,0)");
/*27*/ test("35,36,(32,3)", "(34,8),(29,10),(25,0)");
/*28*/ test("150,130,(50,113)", "(8,56),(65,14),(149,128)");
/*29*/ test("180,120,(120,18)", "-");
/*30*/ test("200,200,(24,134)", "(0,45),(89,21),(137,199)");&lt;/textarea&gt;&lt;h3&gt;JSON 形式のテストデータ&lt;/h3&gt;&lt;a href="https://github.com/mtsmfm/mtsmfm.github.io/raw/2c9f20bd754a494926eda17ff7ecfdbb5db8b657/source/2018-07-07-doukaku-e25/doukaku.json" target="_blank"&gt;json&lt;/a&gt;</content>
  </entry>
  <entry>
    <title>オフラインリアルタイムどう書く E21 の問題 - ドキドキロシアンルーレット</title>
    <link rel="alternate" href="http://mtsmfm.github.io/2018/02/03/doukaku-e21.html"/>
    <id>http://mtsmfm.github.io/2018/02/03/doukaku-e21.html</id>
    <published>2018-02-03T07:00:00+00:00</published>
    <updated>2022-08-01T15:02:09+00:00</updated>
    <author>
      <name>mtsmfm</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://yhpg.doorkeeper.jp/events/69404"&gt;オフラインリアルタイムどう書く E21&lt;/a&gt; の問題です。&lt;/p&gt;

&lt;p&gt;ロシアンルーレットをして、何人かがアタリを引いた。&lt;/p&gt;

&lt;p&gt;最初にリボルバーに弾がどう込められていたか求めよ。&lt;/p&gt;

&lt;h2&gt;ルール&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;順番に引き金を引く&lt;/li&gt;
&lt;li&gt;ハズレた場合、弾倉を回転させる&lt;/li&gt;
&lt;li&gt;アタリを引いた場合、リタイア&lt;/li&gt;
&lt;li&gt;ただし、全員回転させかたに癖があり、常に同じ方向に同じだけ回転させる&lt;/li&gt;
&lt;li&gt;残弾が 0 になるまで順番に続ける&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;入力&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;31[1]/6&lt;/code&gt; のような形式。
最初の数字、&lt;code&gt;3&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt; はそれぞれ参加者。
&lt;code&gt;/&lt;/code&gt; の後ろの数字、&lt;code&gt;6&lt;/code&gt; はリボルバーの最大装填数。&lt;/p&gt;

&lt;p&gt;参加者の数字は弾倉を回転させる度合い。この場合、&lt;code&gt;3&lt;/code&gt; ならば &lt;code&gt;3/6&lt;/code&gt; 、つまり弾倉を半回転させる。
&lt;code&gt;[]&lt;/code&gt; で囲まれている参加者は当たりを引いた人。&lt;/p&gt;

&lt;h2&gt;出力&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;000010&lt;/code&gt; のような形式。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0&lt;/code&gt; がハズレ、&lt;code&gt;1&lt;/code&gt; がアタリ。
左から順番に並んでいる。&lt;/p&gt;

&lt;h2&gt;補足&lt;/h2&gt;

&lt;p&gt;不正な入力について考慮する必要はない。
出力候補が複数あることはない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;実装ができた方は &lt;a href="http://qiita.com/mtsmfm/items/b48952dee07784cce8f2"&gt;Qiitaの記事&lt;/a&gt; のコメント欄からリンクを張っていただくと見つけやすくて助かります。&lt;/p&gt;
&lt;h2&gt;サンプルデータ(修正版)&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;#&lt;/th&gt;&lt;th&gt;入力&lt;/th&gt;&lt;th&gt;期待&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;3[2]3/6&lt;/td&gt;&lt;td&gt;000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;21[3]/6&lt;/td&gt;&lt;td&gt;000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;12[3]/6&lt;/td&gt;&lt;td&gt;000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;3[2]1/6&lt;/td&gt;&lt;td&gt;000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;3[2]3/6&lt;/td&gt;&lt;td&gt;000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;1[1]3/6&lt;/td&gt;&lt;td&gt;010000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;[3]4[4]3/7&lt;/td&gt;&lt;td&gt;1000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;4[4]24/7&lt;/td&gt;&lt;td&gt;0000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;[4]41[1]/7&lt;/td&gt;&lt;td&gt;1000010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;1[1]33[1]/8&lt;/td&gt;&lt;td&gt;01000001&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;[1]12[4][3]/8&lt;/td&gt;&lt;td&gt;10100001&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;2[2][1]12/8&lt;/td&gt;&lt;td&gt;01001000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;1[2][2][1]34/9&lt;/td&gt;&lt;td&gt;011100000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;[4]1141[2]/9&lt;/td&gt;&lt;td&gt;100000010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;[3]33[3][2]2/9&lt;/td&gt;&lt;td&gt;100000110&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;[5]1[3]44[2][3]/10&lt;/td&gt;&lt;td&gt;0100101001&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;3[1][2]23[3][1]/10&lt;/td&gt;&lt;td&gt;0110110000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;33[5]12[5][2]/10&lt;/td&gt;&lt;td&gt;0000010011&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;13[3]1[4][4][4][1]/11&lt;/td&gt;&lt;td&gt;00101100110&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;[5]3[2]35[1]1[4]/11&lt;/td&gt;&lt;td&gt;10001010001&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;4[1]4[5]342[5]/11&lt;/td&gt;&lt;td&gt;00001010100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;[5][4]55[2][2][4]33/12&lt;/td&gt;&lt;td&gt;001111100000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;3[2]415[1][4][4]3/12&lt;/td&gt;&lt;td&gt;010101000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;3[2][4][2][4]4[5]4[1]/12&lt;/td&gt;&lt;td&gt;011001110010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;3555[6]33[6]4[1]/13&lt;/td&gt;&lt;td&gt;0010010000010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;4[1]32[6]3[3]4[3]4/13&lt;/td&gt;&lt;td&gt;0001100001001&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;2[2]14[3][1][6][4]63/13&lt;/td&gt;&lt;td&gt;0010011001010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;2[9][9][9]8[2]3[4][8]2[1]8/15&lt;/td&gt;&lt;td&gt;011010100001110&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;[1][2][6]64[1][3]68[3][8]8/15&lt;/td&gt;&lt;td&gt;111001000011010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;/td&gt;&lt;td&gt;[7][6][5]54[5]8[5]53[8]1/15&lt;/td&gt;&lt;td&gt;010001110010001&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;テストデータ(修正版)&lt;/h2&gt;&lt;textarea&gt;/*0*/ test("3[2]3/6", "000100");
/*1*/ test("21[3]/6", "000100");
/*2*/ test("12[3]/6", "000100");
/*3*/ test("3[2]1/6", "000100");
/*4*/ test("3[2]3/6", "000100");
/*5*/ test("1[1]3/6", "010000");
/*6*/ test("[3]4[4]3/7", "1000100");
/*7*/ test("4[4]24/7", "0000100");
/*8*/ test("[4]41[1]/7", "1000010");
/*9*/ test("1[1]33[1]/8", "01000001");
/*10*/ test("[1]12[4][3]/8", "10100001");
/*11*/ test("2[2][1]12/8", "01001000");
/*12*/ test("1[2][2][1]34/9", "011100000");
/*13*/ test("[4]1141[2]/9", "100000010");
/*14*/ test("[3]33[3][2]2/9", "100000110");
/*15*/ test("[5]1[3]44[2][3]/10", "0100101001");
/*16*/ test("3[1][2]23[3][1]/10", "0110110000");
/*17*/ test("33[5]12[5][2]/10", "0000010011");
/*18*/ test("13[3]1[4][4][4][1]/11", "00101100110");
/*19*/ test("[5]3[2]35[1]1[4]/11", "10001010001");
/*20*/ test("4[1]4[5]342[5]/11", "00001010100");
/*21*/ test("[5][4]55[2][2][4]33/12", "001111100000");
/*22*/ test("3[2]415[1][4][4]3/12", "010101000100");
/*23*/ test("3[2][4][2][4]4[5]4[1]/12", "011001110010");
/*24*/ test("3555[6]33[6]4[1]/13", "0010010000010");
/*25*/ test("4[1]32[6]3[3]4[3]4/13", "0001100001001");
/*26*/ test("2[2]14[3][1][6][4]63/13", "0010011001010");
/*27*/ test("2[9][9][9]8[2]3[4][8]2[1]8/15", "011010100001110");
/*28*/ test("[1][2][6]64[1][3]68[3][8]8/15", "111001000011010");
/*29*/ test("[7][6][5]54[5]8[5]53[8]1/15", "010001110010001");&lt;/textarea&gt;&lt;h2&gt;サンプルデータ(修正前、一意にならない)&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;#&lt;/th&gt;&lt;th&gt;入力&lt;/th&gt;&lt;th&gt;期待&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;3[2]3/6&lt;/td&gt;&lt;td&gt;000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;31[2]/6&lt;/td&gt;&lt;td&gt;000010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;32[1]/6&lt;/td&gt;&lt;td&gt;000001&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;[2][2]2/6&lt;/td&gt;&lt;td&gt;100010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;1[3][2]/6&lt;/td&gt;&lt;td&gt;010010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;2[2]2/6&lt;/td&gt;&lt;td&gt;001000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;2[1]23/7&lt;/td&gt;&lt;td&gt;0010000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;13[1]3/7&lt;/td&gt;&lt;td&gt;0000100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;[4]2[1]2/7&lt;/td&gt;&lt;td&gt;1010000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;3[1][2]2[2]/8&lt;/td&gt;&lt;td&gt;00011010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;4[4]21[1]/8&lt;/td&gt;&lt;td&gt;00001001&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;[2][2]124/8&lt;/td&gt;&lt;td&gt;11000000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;[3]4[2][1][3]3/9&lt;/td&gt;&lt;td&gt;100010110&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;[2][1]43[2]3/9&lt;/td&gt;&lt;td&gt;101010000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;3[3][1]4[1]3/9&lt;/td&gt;&lt;td&gt;010100100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;[3][5][3]554[4]/10&lt;/td&gt;&lt;td&gt;1100001100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;[3]2[3][5][3]45/10&lt;/td&gt;&lt;td&gt;1110010000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;53[1]4[1]2[4]/10&lt;/td&gt;&lt;td&gt;0010100010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;2[3][2]5[4]54[1]/11&lt;/td&gt;&lt;td&gt;00110010100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;[3][5]554[2]25/11&lt;/td&gt;&lt;td&gt;10000010010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;[1]5[5]413[5]2/11&lt;/td&gt;&lt;td&gt;10100100000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;[1]33[3]52[5][4]2/12&lt;/td&gt;&lt;td&gt;110000101000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;4[4]3[1][3]4[1]4[3]/12&lt;/td&gt;&lt;td&gt;010011010100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;[3]2[1][2]14[2]54/12&lt;/td&gt;&lt;td&gt;101100000010&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;[2][6]45[3][2]42[6]2/13&lt;/td&gt;&lt;td&gt;1001100011000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;[1]2[3][3]6[3][1]56[4]/13&lt;/td&gt;&lt;td&gt;1010001010101&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;3[4]213[6]1[1]5[6]/13&lt;/td&gt;&lt;td&gt;0011000001100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;6[3]8[8]8[6]4[4][2][8][7][9]/15&lt;/td&gt;&lt;td&gt;000101111011001&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;[4]6[5]15[2]6[5]343[2]/15&lt;/td&gt;&lt;td&gt;100100100000110&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;/td&gt;&lt;td&gt;66[6]2[9]6[6][9]5[6]11/15&lt;/td&gt;&lt;td&gt;001001010000101&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;テストデータ(修正前、一意にならない)&lt;/h2&gt;&lt;textarea&gt;/*0*/ test("3[2]3/6", "000100");
/*1*/ test("31[2]/6", "000010");
/*2*/ test("32[1]/6", "000001");
/*3*/ test("[2][2]2/6", "100010");
/*4*/ test("1[3][2]/6", "010010");
/*5*/ test("2[2]2/6", "001000");
/*6*/ test("2[1]23/7", "0010000");
/*7*/ test("13[1]3/7", "0000100");
/*8*/ test("[4]2[1]2/7", "1010000");
/*9*/ test("3[1][2]2[2]/8", "00011010");
/*10*/ test("4[4]21[1]/8", "00001001");
/*11*/ test("[2][2]124/8", "11000000");
/*12*/ test("[3]4[2][1][3]3/9", "100010110");
/*13*/ test("[2][1]43[2]3/9", "101010000");
/*14*/ test("3[3][1]4[1]3/9", "010100100");
/*15*/ test("[3][5][3]554[4]/10", "1100001100");
/*16*/ test("[3]2[3][5][3]45/10", "1110010000");
/*17*/ test("53[1]4[1]2[4]/10", "0010100010");
/*18*/ test("2[3][2]5[4]54[1]/11", "00110010100");
/*19*/ test("[3][5]554[2]25/11", "10000010010");
/*20*/ test("[1]5[5]413[5]2/11", "10100100000");
/*21*/ test("[1]33[3]52[5][4]2/12", "110000101000");
/*22*/ test("4[4]3[1][3]4[1]4[3]/12", "010011010100");
/*23*/ test("[3]2[1][2]14[2]54/12", "101100000010");
/*24*/ test("[2][6]45[3][2]42[6]2/13", "1001100011000");
/*25*/ test("[1]2[3][3]6[3][1]56[4]/13", "1010001010101");
/*26*/ test("3[4]213[6]1[1]5[6]/13", "0011000001100");
/*27*/ test("6[3]8[8]8[6]4[4][2][8][7][9]/15", "000101111011001");
/*28*/ test("[4]6[5]15[2]6[5]343[2]/15", "100100100000110");
/*29*/ test("66[6]2[9]6[6][9]5[6]11/15", "001001010000101");&lt;/textarea&gt;</content>
  </entry>
  <entry>
    <title>オフラインリアルタイムどう書く E19 の問題 - カード当てゲーム</title>
    <link rel="alternate" href="http://mtsmfm.github.io/2017/11/04/doukaku-e19.html"/>
    <id>http://mtsmfm.github.io/2017/11/04/doukaku-e19.html</id>
    <published>2017-11-04T07:00:00+00:00</published>
    <updated>2022-08-01T15:02:09+00:00</updated>
    <author>
      <name>mtsmfm</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://yhpg.doorkeeper.jp/events/66089"&gt;オフラインリアルタイムどう書く&lt;/a&gt; E19 の問題です。&lt;/p&gt;

&lt;p&gt;1からNまでのカードが2枚ずつある。
このカードは、奇数と偶数で裏に書いてある模様が違う。
これをシャッフルし、裏向きにして左から小さい順に2行に並べる。&lt;/p&gt;

&lt;p&gt;並んでいるカードを当てよう。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2017/11/04/image.svg" alt="図" /&gt;&lt;/p&gt;

&lt;h2&gt;入力&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;xxoxo,oooxo&lt;/code&gt; のような形式。
&lt;code&gt;o&lt;/code&gt; は奇数、&lt;code&gt;x&lt;/code&gt; は偶数、&lt;code&gt;,&lt;/code&gt; は行の区切り。&lt;/p&gt;

&lt;p&gt;つまり、この場合、1 ~ 5 までのカードが2枚ずつあり、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
xxoxo
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
oooxo
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;のように並んでいるということ。&lt;/p&gt;

&lt;h2&gt;出力&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;2,2,3,4,5,1,1,3,4,5&lt;/code&gt; のような形式。&lt;/p&gt;

&lt;p&gt;数字を &lt;code&gt;,&lt;/code&gt; で区切ったもの。行の区切りは不要。&lt;/p&gt;

&lt;p&gt;候補が複数あれば、 &lt;code&gt;1,1,2,2,5,3,3,4,4,5|3,3,4,4,5,1,1,2,2,5&lt;/code&gt; のように &lt;code&gt;|&lt;/code&gt; で区切る。&lt;/p&gt;

&lt;h2&gt;補足&lt;/h2&gt;

&lt;p&gt;不正な入力について考慮する必要はない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;実装ができた方は &lt;a href="http://qiita.com/mtsmfm/items/67bf5c121ecbd9b5fab3"&gt;Qiitaの記事&lt;/a&gt; のコメント欄からリンクを張っていただくと見つけやすくて助かります。&lt;/p&gt;
&lt;h2&gt;サンプルデータ&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;#&lt;/th&gt;&lt;th&gt;入力&lt;/th&gt;&lt;th&gt;期待&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;xxoxo,oooxo&lt;/td&gt;&lt;td&gt;2,2,3,4,5,1,1,3,4,5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;ooxxo,ooxxo&lt;/td&gt;&lt;td&gt;1,1,2,2,5,3,3,4,4,5|3,3,4,4,5,1,1,2,2,5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;oxoxo,oxoxo&lt;/td&gt;&lt;td&gt;1,2,3,4,5,1,2,3,4,5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;ooxoxx,oxxoxo&lt;/td&gt;&lt;td&gt;1,3,4,5,6,6,1,2,2,3,4,5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;ooxxxx,ooxxoo&lt;/td&gt;&lt;td&gt;1,1,2,2,6,6,3,3,4,4,5,5|3,3,4,4,6,6,1,1,2,2,5,5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;oxoxox,oxoxox&lt;/td&gt;&lt;td&gt;1,2,3,4,5,6,1,2,3,4,5,6&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;oxoxxxo,oxoxooo&lt;/td&gt;&lt;td&gt;1,2,3,4,6,6,7,1,2,3,4,5,5,7&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;oxooxxx,oxxoooo&lt;/td&gt;&lt;td&gt;1,2,3,3,4,6,6,1,2,4,5,5,7,7&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;oxoxxxo,oxoooxo&lt;/td&gt;&lt;td&gt;1,2,3,4,4,6,7,1,2,3,5,5,6,7&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;oxoxooox,oxoxoxxx&lt;/td&gt;&lt;td&gt;1,2,3,4,5,7,7,8,1,2,3,4,5,6,6,8&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;ooxoxxox,ooxxxoox&lt;/td&gt;&lt;td&gt;3,3,4,5,6,6,7,8,1,1,2,2,4,5,7,8&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;oxoxxxxx,oxoxoooo&lt;/td&gt;&lt;td&gt;1,2,3,4,6,6,8,8,1,2,3,4,5,5,7,7&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;oxoxooxxo,oxooxxoxo&lt;/td&gt;&lt;td&gt;1,2,5,6,7,7,8,8,9,1,2,3,3,4,4,5,6,9&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;oxoooooxo,oxxxoxxxo&lt;/td&gt;&lt;td&gt;1,2,3,3,5,7,7,8,9,1,2,4,4,5,6,6,8,9&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;oxoxoxxox,oxoxooxoo&lt;/td&gt;&lt;td&gt;1,2,3,4,5,6,6,7,8,1,2,3,4,5,7,8,9,9&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;oooxxxxoxo,xxooooxoxx&lt;/td&gt;&lt;td&gt;1,1,3,4,4,6,6,7,8,9,2,2,3,5,5,7,8,9,10,10&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;ooooxxxoxx,xxooxxxooo&lt;/td&gt;&lt;td&gt;1,1,5,5,6,8,8,9,10,10,2,2,3,3,4,4,6,7,7,9&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;xoxxoxxoxo,ooxoooxoxx&lt;/td&gt;&lt;td&gt;2,3,4,4,5,6,6,7,8,9,1,1,2,3,5,7,8,9,10,10&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;oxooxxoooxo,oxxxoxooxxo&lt;/td&gt;&lt;td&gt;1,2,3,3,4,4,5,5,7,8,11,1,2,6,6,7,8,9,9,10,10,11&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;oooxxxxoxoo,xxooooxooxx&lt;/td&gt;&lt;td&gt;1,1,3,4,4,6,6,7,8,11,11,2,2,3,5,5,7,8,9,9,10,10&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;ooooxxoxoxo,oxxxxooxoxo&lt;/td&gt;&lt;td&gt;1,3,3,5,6,6,7,8,9,10,11,1,2,2,4,4,5,7,8,9,10,11&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;ooooxoxooxox,xxoxxoxoxxox&lt;/td&gt;&lt;td&gt;1,1,3,5,6,7,8,9,9,10,11,12,2,2,3,4,4,5,6,7,8,10,11,12&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;ooxxoooooxox,ooxxoxxxxxox&lt;/td&gt;&lt;td&gt;1,1,2,2,5,7,7,9,9,10,11,12,3,3,4,4,5,6,6,8,8,10,11,12|3,3,4,4,5,7,7,9,9,10,11,12,1,1,2,2,5,6,6,8,8,10,11,12&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;xoxoxxooxoxx,ooxoxoxooxxo&lt;/td&gt;&lt;td&gt;2,3,4,5,6,6,7,7,8,11,12,12,1,1,2,3,4,5,8,9,9,10,10,11|2,3,4,5,6,8,9,9,10,11,12,12,1,1,2,3,4,5,6,7,7,8,10,11&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;oooooooooooo,xxxxxxxxxxxx&lt;/td&gt;&lt;td&gt;1,1,3,3,5,5,7,7,9,9,11,11,2,2,4,4,6,6,8,8,10,10,12,12&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;テストデータ&lt;/h2&gt;&lt;textarea&gt;/*0*/ test("xxoxo,oooxo", "2,2,3,4,5,1,1,3,4,5");
/*1*/ test("ooxxo,ooxxo", "1,1,2,2,5,3,3,4,4,5|3,3,4,4,5,1,1,2,2,5");
/*2*/ test("oxoxo,oxoxo", "1,2,3,4,5,1,2,3,4,5");
/*3*/ test("ooxoxx,oxxoxo", "1,3,4,5,6,6,1,2,2,3,4,5");
/*4*/ test("ooxxxx,ooxxoo", "1,1,2,2,6,6,3,3,4,4,5,5|3,3,4,4,6,6,1,1,2,2,5,5");
/*5*/ test("oxoxox,oxoxox", "1,2,3,4,5,6,1,2,3,4,5,6");
/*6*/ test("oxoxxxo,oxoxooo", "1,2,3,4,6,6,7,1,2,3,4,5,5,7");
/*7*/ test("oxooxxx,oxxoooo", "1,2,3,3,4,6,6,1,2,4,5,5,7,7");
/*8*/ test("oxoxxxo,oxoooxo", "1,2,3,4,4,6,7,1,2,3,5,5,6,7");
/*9*/ test("oxoxooox,oxoxoxxx", "1,2,3,4,5,7,7,8,1,2,3,4,5,6,6,8");
/*10*/ test("ooxoxxox,ooxxxoox", "3,3,4,5,6,6,7,8,1,1,2,2,4,5,7,8");
/*11*/ test("oxoxxxxx,oxoxoooo", "1,2,3,4,6,6,8,8,1,2,3,4,5,5,7,7");
/*12*/ test("oxoxooxxo,oxooxxoxo", "1,2,5,6,7,7,8,8,9,1,2,3,3,4,4,5,6,9");
/*13*/ test("oxoooooxo,oxxxoxxxo", "1,2,3,3,5,7,7,8,9,1,2,4,4,5,6,6,8,9");
/*14*/ test("oxoxoxxox,oxoxooxoo", "1,2,3,4,5,6,6,7,8,1,2,3,4,5,7,8,9,9");
/*15*/ test("oooxxxxoxo,xxooooxoxx", "1,1,3,4,4,6,6,7,8,9,2,2,3,5,5,7,8,9,10,10");
/*16*/ test("ooooxxxoxx,xxooxxxooo", "1,1,5,5,6,8,8,9,10,10,2,2,3,3,4,4,6,7,7,9");
/*17*/ test("xoxxoxxoxo,ooxoooxoxx", "2,3,4,4,5,6,6,7,8,9,1,1,2,3,5,7,8,9,10,10");
/*18*/ test("oxooxxoooxo,oxxxoxooxxo", "1,2,3,3,4,4,5,5,7,8,11,1,2,6,6,7,8,9,9,10,10,11");
/*19*/ test("oooxxxxoxoo,xxooooxooxx", "1,1,3,4,4,6,6,7,8,11,11,2,2,3,5,5,7,8,9,9,10,10");
/*20*/ test("ooooxxoxoxo,oxxxxooxoxo", "1,3,3,5,6,6,7,8,9,10,11,1,2,2,4,4,5,7,8,9,10,11");
/*21*/ test("ooooxoxooxox,xxoxxoxoxxox", "1,1,3,5,6,7,8,9,9,10,11,12,2,2,3,4,4,5,6,7,8,10,11,12");
/*22*/ test("ooxxoooooxox,ooxxoxxxxxox", "1,1,2,2,5,7,7,9,9,10,11,12,3,3,4,4,5,6,6,8,8,10,11,12|3,3,4,4,5,7,7,9,9,10,11,12,1,1,2,2,5,6,6,8,8,10,11,12");
/*23*/ test("xoxoxxooxoxx,ooxoxoxooxxo", "2,3,4,5,6,6,7,7,8,11,12,12,1,1,2,3,4,5,8,9,9,10,10,11|2,3,4,5,6,8,9,9,10,11,12,12,1,1,2,3,4,5,6,7,7,8,10,11");
/*24*/ test("oooooooooooo,xxxxxxxxxxxx", "1,1,3,3,5,5,7,7,9,9,11,11,2,2,4,4,6,6,8,8,10,10,12,12");&lt;/textarea&gt;</content>
  </entry>
  <entry>
    <title>RubyKaigi 2017 で Language Serverの話をします</title>
    <link rel="alternate" href="http://mtsmfm.github.io/2017/09/15/rubykaigi.html"/>
    <id>http://mtsmfm.github.io/2017/09/15/rubykaigi.html</id>
    <published>2017-09-14T16:00:00+00:00</published>
    <updated>2022-08-01T15:02:09+00:00</updated>
    <author>
      <name>mtsmfm</name>
    </author>
    <content type="html">&lt;p&gt;RubyKaigi 2017 で Language Server の話をします。
&lt;a href="http://rubykaigi.org/2017/presentations/mtsmfm.html"&gt;http://rubykaigi.org/2017/presentations/mtsmfm.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この発表を通じて、Language Server というもの、その考え方を知ってもらい、
「あのエディタならこの便利プラグインがあるがこのエディタにはない」という状況が発生しないようにすることで、開発者が Ruby をさらにキメやすくなるといいなぁと思っています。
また、Ruby の静的解析について僕自身手探りな状態なので、情報交換ができれば嬉しいです。&lt;/p&gt;

&lt;p&gt;Language Server とは、補完や定義ジャンプ、シンタックスエラーの検出といった、エディタに向けた便利機能を提供してくれるサーバです。
具体的にどのようにエディタとやり取りするかは &lt;a href="https://github.com/Microsoft/language-server-protocol"&gt;Language Server Protocol&lt;/a&gt; に定義されています。&lt;/p&gt;

&lt;p&gt;Ruby におけるエディタの補完は基本的にバッファから単語を出してくるだけだと思うのですが、これがもっと便利になったらいいなぁと思い、
&lt;a href="https://github.com/mtsmfm/language_server-ruby"&gt;language_server という gem&lt;/a&gt; を作っています。
現状、 language_server gem では、 &lt;code&gt;ruby -wc&lt;/code&gt; によるシンタックスエラーおよび警告の検出、 rcodetools による動的情報を利用した補完、
そして (まだ完璧ではないですが) 自前実装による定数の補完と定義ジャンプができます。&lt;/p&gt;

&lt;p&gt;また、プロトコル部分は &lt;a href="https://github.com/mtsmfm/language_server-protocol-ruby"&gt;language_server-protocol&lt;/a&gt; として切り出したので、
簡単に Ruby で Language Server を書き始めることができます。&lt;/p&gt;

&lt;p&gt;このセッションでは、大きく 3 つの内容を話す予定です。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Language Server とは何か&lt;/li&gt;
&lt;li&gt;Ruby で Language Server はどう作ればいいか&lt;/li&gt;
&lt;li&gt;language_server gem の紹介&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;登場するキーワードとしては、以下のようなものが出てきます。一応発表内でも簡単に説明する予定です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/language-server-protocol"&gt;Language Server Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jsonrpc.org/specification"&gt;JSON RPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ruby-lang.org/ja/2.4.0/library/ripper.html"&gt;Ripper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language Server とは結局のところ LSP さえ喋れれば裏側は自由なハブのようなものなので、 (LSP の語彙力の範疇であれば) Rubocop など他のツールを動かすこともできます。
&lt;a href="http://magazine.rubyist.net/?preRubyKaigi2017-01"&gt;RubyKaigi 2017 タイムテーブル徹底解説&lt;/a&gt; にあるように、型や静的解析についての発表がいくつもあるので、
これらの話を聞いて組み込んでいけたら便利そうです。&lt;/p&gt;

&lt;p&gt;それでは広島で。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Docker 版 pow もどきの Yaichi を作った</title>
    <link rel="alternate" href="http://mtsmfm.github.io/2017/06/29/yaichi.html"/>
    <id>http://mtsmfm.github.io/2017/06/29/yaichi.html</id>
    <published>2017-06-28T16:00:00+00:00</published>
    <updated>2022-08-01T15:02:09+00:00</updated>
    <author>
      <name>mtsmfm</name>
    </author>
    <content type="html">&lt;p&gt;複数のアプリが連携しているような Web アプリを開発する場合、アプリ A が localhost:3000 で、B が localhost:3001 で&amp;hellip;
というような構成にして手元では開発することがあるだろう。&lt;/p&gt;

&lt;p&gt;現に Quipper では生徒向け、先生向け、管理者向け、問題作成者向け etc といったようにアプリがいくつもあって、ポート何番で動いているのかよくわからなくなる。
前々から Docker 版 pow みたいなのが欲しいなー (pow 使ったことないけど) と思っていたので、えいやで作った。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mtsmfm/yaichi"&gt;https://github.com/mtsmfm/yaichi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;名前は某りゅうおうのプロ棋士から。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -v /var/run/docker.sock:/var/run/docker.sock -p XXXX:YYYY mtsmfm/yaichi&lt;/code&gt; すると、他のコンテナのネットワークに自身を勝手に追加して、
&lt;code&gt;&amp;lt;container-name&amp;gt;.localhost:XXXX&lt;/code&gt; へのアクセスを他のコンテナの YYYY ポートへと流すリバースプロキシとして動作する。
livereload などのために別のポートも欲しければ、 &lt;code&gt;-p ZZZZ:AAAA&lt;/code&gt; を追加すればおっけー。&lt;/p&gt;

&lt;p&gt;雑にクラスレベルのインスタンス変数としてキャッシュしているけれど、スレッドセーフじゃないので mutex とか使わないといけない気がしているが、
今週とりあえずで使ってみている分には概ね動いていそう。&lt;/p&gt;

&lt;p&gt;ngx_mruby と CRuby のコラボレーション () によって動いている。
listen するポートをコンテナ起動時のポート設定に応じて決定したかったが、 ngx_mruby だけで完結するやり方がわからなかったので erb で解決。
mruby での erb の使い方もわからなかったので、起動時の erb による nginx.conf の生成だけ CRuby を使っている。&lt;/p&gt;

&lt;p&gt;当初一番時間がかかったのは Docker イメージの軽量化。
&lt;a href="https://github.com/matsumotory/ngx_mruby/blob/master/Dockerfile"&gt;ngx_mruby の Dockerfile を元に&lt;/a&gt;していたが、
200 MB 超になってしまったので &lt;a href="https://github.com/mtsmfm/yaichi/commit/beb854b97fd0816b311ddff9c2ce170e5fce90a0"&gt;alpine 使うように書き直してみた&lt;/a&gt;ら 50 MB まで減った。&lt;/p&gt;

&lt;p&gt;ngx_mruby をシングルバイナリで動くようにする方法があったら multi stage build で済みそうだけどやり方がわからなかった。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Quipper に入って1ヶ月弱、午後出社がこんなに快適とは知らなかった。&lt;/p&gt;

&lt;p&gt;普段の業務では会話はほぼ日本語だが、今日は初の英語でのミーティングがあった。自身の英語力不足を感じた。
やはりうまいこと会話ができないと発言しようがないし出席する意味がない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;1 つくらい通ればいいなぁと出した CFP が Tokyu もぎんざも RubyKaigi も全部通って嬉しい悲鳴。
宿どうしよう。&lt;/p&gt;
</content>
  </entry>
</feed>
